#!/bin/sh
set -e

show_help() {
  echo >&2 "podman-desktop

    --name <name=podman>             virtual machine name
    --identity <path=~/.ssh/id_rsa>  user ssh key
    --cpus <#=2>                     # of cpus
    --mem <size=2G>                  amount of memeory
    --disk <size=10G>                disk size
    <version=20.04>                  version of ubuntu (see multipass fetch)
  "
}

die() {
  echo >&2 "$@"
  exit 1
}

install_cmd() {
  set +e
  if [ -z "$(command -v brew)" ]; then
    echo "# Install homebrew for easier MacOS management"
    # shellcheck disable=SC2016
    echo '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"'
  fi
  set -e
  echo "brew install $1"
}

validate() {
  cmd=$1
  if [ ! -x "$(command -v "$cmd")" ]; then
    echo "ERROR: \`$cmd\` command not found. Please install $cmd." >&2
    echo "Instructions are:"
    install_cmd "$cmd"
    exit 1
  fi
}

validate "podman"
validate "multipass"

while [ $# -gt 0 ]; do
  key="$1"

  case $key in
    -h|--help)
      show_help; exit ;;
    -n|--name)
      INSTANCE_NAME="$2"; shift 2 ;;
    -i|--identity)
      IDENTITY="$2"; shift 2 ;;
    -c|--cpus)
      CPUS="$2"; shift 2 ;;
    -m|--mem)
      MEM="$2"; shift 2 ;;
    -d|--disk)
      DISK="$2"; shift 2 ;;
    --) shift ; break ;;
    --*|-*)
      die "unsupported flag $1"
      ;;
    *)
      [ -n "$VERSION_ID" ] && die "already set version"
      VERSION_ID="$1"; shift ;;
  esac
done

INSTANCE_NAME="${INSTANCE_NAME:-podman}"
IDENTITY="${IDENTITY:-$HOME/.ssh/id_rsa}"
PUBKEYFILE=${IDENTITY}.pub
VERSION_ID="${VERSION_ID:-20.04}"
MOUNTS=${MOUNTS:-/Users /Volumes /private /tmp /var/folders} # Docker Desktop Defaults

test -f "$IDENTITY" || die "cannot find identity $IDENTITY"
test -f "$PUBKEYFILE" || die "cannot find pubkey $PUBKEYFILE"
PUBKEY=$(cat "$PUBKEYFILE")

PRIMARY=$(multipass get client.primary-name)
if [ "$PRIMARY" != "$INSTANCE_NAME" ] && [ "$PRIMARY" != "primary" ]; then
   die "client.primary-name already set ($PRIMARY) for multipass"
fi

if ! pgrep multipassd 2>/dev/null; then
  echo multipassd not running, please run the following command and try again
  echo
  echo     sudo launchctl start com.canonical.multipassd
  exit 1
fi

multipass set client.primary-name="$INSTANCE_NAME"
echo >&2 "this may take a while - to view progress:

    multipass exec $INSTANCE_NAME -- tail -f /var/log/cloud-init-output.log
"
  echo "
users:
  - name: ubuntu
    ssh-authorized-keys:
      - ${PUBKEY}

apt:
  preserve_sources_list: true
  sources:
    libcontainers.list:
      source: \"deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /\"
      keyid: 4D64390375060AA4

package_upgrade: true
packages:
  - podman
  - containerd
  - fuse-overlayfs
" | multipass launch \
    --cpus "${CPUS:-2}" \
    --mem "${MEM:-2G}" \
    --disk "${DISK:-10G}" \
    --name "${INSTANCE_NAME}" \
    --cloud-init - \
    "$@" \
    "${VERSION_ID}"

multipass exec "$INSTANCE_NAME" -- systemctl --user enable --now podman.socket
multipass exec "$INSTANCE_NAME" -- sudo loginctl enable-linger ubuntu
multipass exec "$INSTANCE_NAME" -- sudo systemctl enable --now ssh.service

IP=$(multipass info "${INSTANCE_NAME}" | grep IPv4: | cut -d ':' -f2 | tr -ds ' ' '')
CONNECTION=ssh://ubuntu@"${IP}"/run/user/1000/podman/podman.sock
_IDENTITY=$(podman system connection list --format '{{.URI}} {{.Name}}' | grep "$CONNECTION" | cut -d' ' -f2)

if [ "$_IDENTITY" ]; then echo "podman has a connection named $_IDENTITY"; else
  podman system connection add "$INSTANCE_NAME" --identity "${IDENTITY}" "$CONNECTION"
fi

for mount in $MOUNTS; do multipass mount "$mount" "$INSTANCE_NAME"; done

printf "%s\n" "$INSTANCE_NAME"

echo >&2 "You may want to add the following to your ~/.ssh/config:

    Host ${IP}
      ForwardAgent yes
      User ubuntu
"

echo >&2 "To remove:

    podman system connection remove \"$INSTANCE_NAME\"
    multipass stop \"$INSTANCE_NAME\"
    multipass delete \"$INSTANCE_NAME\"
    multipass purge
"
